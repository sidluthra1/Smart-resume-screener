spring.application.name=backend

# ===============================
# =   Postgres Configuration   =
# ===============================
# Database connection URL
spring.datasource.url=jdbc:postgresql://localhost:5432/smart_resume_db
# Database username
spring.datasource.username=postgres
# Database password (Consider using environment variables or secrets management for production)
spring.datasource.password=Siddgr82682!
# JDBC Driver class
spring.datasource.driver-class-name=org.postgresql.Driver

# ===============================
# = JPA / Hibernate Settings   =
# ===============================
# Database schema generation strategy (e.g., update, validate, create, create-drop)
# 'update' attempts to update the schema based on entity definitions. Use 'validate' in production.
spring.jpa.hibernate.ddl-auto=update
# Log generated SQL statements to the console (useful for debugging)
spring.jpa.show-sql=true
# (Optional) Format the logged SQL for better readability
# spring.jpa.properties.hibernate.format_sql=true

# ===============================
# =  File Upload Configuration =
# ===============================
# Maximum size allowed for individual file uploads (e.g., 10 Megabytes)
spring.servlet.multipart.max-file-size=10MB
# Maximum size allowed for the entire multipart/form-data request
spring.servlet.multipart.max-request-size=10MB

# ===============================
# = Custom Application Properties =
# ===============================
# Directory path where uploaded resume files will be stored on the server.
# Ensure this directory exists and the application has write permissions.
file.upload-dir=/Users/siddarthluthra/resume-uploads

# ===============================
# =     Logging Configuration    =
# ===============================
# Set the logging level for Spring Web packages to DEBUG for detailed request/response logging.
logging.level.org.springframework.web=DEBUG
# You can set other levels, e.g., logging.level.root=INFO or logging.level.com.yourname=DEBUG

# ===============================
# =     Security Configuration   =
# ===============================
# Secret key used for signing and verifying JWTs.
# IMPORTANT: This key must be kept secret and should be strong (at least 256 bits for HS256).
# Use environment variables or a secrets management system in production instead of hardcoding.
jwt.secret=mysupersecretkeythatisatleast256bitslong
ai.python-executable=/opt/miniconda3/envs/resume-screener/bin/python
